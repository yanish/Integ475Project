ggplot(SS2012, aes(AwardAmount)) +
geom_histogram(bandwidth=0.1) + theme_minimal()
ggplot(SS2012, aes(AwardAmount)) +
geom_histogram(bandwidth=2.0) + theme_minimal()
ggplot(SS2012, aes(Competition_Year)) +
geom_histogram(bandwidth=2.0) + theme_minimal()
View(SS2012)
geom_histogram(bandwidth=2.0) + theme_minimal()
library(ggplot2)
library(dplyr)
library(gcookbook) # has data we want!
read.csv("~/SS2012.csv")
# simple scatterplot
ggplot(SS2012, aes(Competition_Year)) +
geom_histogram(bandwidth=2.0) + theme_minimal()
ggplot(SS2012, aes(Competition_Yearm, color = ProvinceEN)) +
geom_histogram(bandwidth=2.0) + theme_minimal()
ggplot(SS2012, aes(Competition_Year, color = ProvinceEN)) +
geom_histogram(bandwidth=2.0) + theme_minimal()
ggplot(SS2012, aes(Competition_Year, color = Institution)) +
geom_histogram(bandwidth=2.0) + theme_minimal()
ggplot(SS2012, aes(Competition_Year, color = ProvinceEN)) +
geom_histogram(bandwidth=2.0) + theme_minimal()
ggplot(SS2012, aes(Competition_Year, color = ProvinceEN)) +
geom_histogram(bandwidth=2.0)
ggplot(SS2012, aes(Competition_Year, AwardAmount, color = ProvinceEN)) +
geom_point(size = 2.5) + theme_minimal() + theme_classic()
ggplot(SS2012, aes(Competition_Year, color = DisciplineEN)) +
geom_histogram(bandwidth=2.0) + theme_minimal()
ggplot(SS2012, aes(Competition_Year, color = DisciplineEN)) +
geom_histogram(bandwidth=3.0) + theme_minimal()
ggplot(SS2012, aes(Competition_Year, color = ProgramNameEN)) +
geom_histogram(bandwidth=3.0) + theme_minimal()
ggsave("~/Desktop/climate.pdf")
ggplot(SS2012, aes(Competition_Year, color = ProvineEN)) +
geom_histogram(bandwidth=3.0) + theme_minimal()
ggplot(SS2012, aes(Competition_Year, color = ProvinceEN)) +
geom_histogram(bandwidth=3.0) + theme_minimal()
ggsave("~/Desktop/climate.pdf")
ggsave("~/Desktop/Scatter_Plot.pdf")
ggsave("~/Desktop/Histogram.pdf")
ggplot(SS2012, aes(Competition_Year, AwardAmount, color = ProvinceEN)) +
geom_point(size = 2.5) + theme_minimal() + theme_classic()
ggsave("~/Desktop/Scatter_Plot.pdf")
ggplot(SS2012, aes(Competition_Year, color = ProvinceEN)) +
geom_histogram() + theme_minimal()
ggsave("~/Desktop/Histogram.pdf")
ggplot(SS2012, aes(Competition_Year, color = ProvinceEN)) +
geom_histogram(bandwidth = 5) + theme_minimal()
ggsave("~/Desktop/Histogram.pdf")
ggplot(SS2012, aes(x = ProvinceEN, y = AwardAmount, fill = Cultivar)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=Weight), vjust=2, color = "white", position = position_dodge(.9), size = 4) +
theme(legend.position="right") + theme_light()
ggplot(SS2012, aes(x = ProvinceEN, y = AwardAmount, fill = positive)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=Weight), vjust=2, color = "white", position = position_dodge(.9), size = 4) +
theme(legend.position="right") + theme_light()
ggplot(SS2012, aes(x = ProvinceEN, y = AwardAmount)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=Weight), vjust=2, color = "white", position = position_dodge(.9), size = 4) +
theme(legend.position="right") + theme_light()
ggplot(SS2012, aes(x = ProvinceEN, y = AwardAmount)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=AwardAmount), vjust=2, color = "white", position = position_dodge(.9), size = 4) +
theme(legend.position="right") + theme_light()
ggplot(SS2012, aes(x = Area_of_ResearchEN, y = AwardAmount)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=AwardAmount), vjust=2, color = "white", position = position_dodge(.9), size = 4) +
theme(legend.position="right") + theme_light()
ggplot(SS2012, aes(x = MainDisciplineEN, y = AwardAmount)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=AwardAmount), vjust=2, color = "white", position = position_dodge(.9), size = 4) +
theme(legend.position="right") + theme_light()
ggsave("~/Desktop/bar.pdf")
ggplot(SS2012, aes(x = Institution, y = AwardAmount)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=AwardAmount), vjust=2, color = "white", position = position_dodge(.9), size = 4) +
theme(legend.position="right") + theme_light()
ggplot(SS2012, aes(x = Institution, y = AwardAmount)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=AwardAmount), vjust=5, color = "white", position = position_dodge(.9), size = 4) +
theme(legend.position="right") + theme_light()
ggplot(SS2012, aes(x = Institution, y = AwardAmount, max = 1000000)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=AwardAmount), vjust=5, color = "white", position = position_dodge(.9), size = 4) +
theme(legend.position="right") + theme_light()
ggsave("~/Desktop/bar.pdf")
ggplot(SS2012, aes(x = Competition_Year, y = AwardAmount, max = 1000000)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=AwardAmount), vjust=5, color = "white", position = position_dodge(.9), size = 4) +
theme(legend.position="right") + theme_light()
read.csv("~/SS2012.csv")
View(SS2012)
SSNew <- filter(SS2012, Source == "DisciplineEN", Year >= 1900)
SS2012 <- filter(DisciplineEN, Source == "Art History", Year >= 1900)
SS <- filter(SS2012, Source == "Art History", Year >= 1900)
SS <- filter(SS2012, Source == "DisciplineEN", Year >= 1900)
SS <- filter(SS2012, Source == DisciplineEN, Year >= 1900)
SS <- filter(SS2012, DisciplineEN == "Art History")
View(SS)
View(SS)
ggplot(SS, aes(x = Competition_Year, y = AwardAmount, fill = positive)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = Competition_Year, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = DisciplineEN, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = Institution, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = Institution, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none") + axis(format.AsIs(x, width = 3)
ggplot(SS, aes(x = Institution, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none") + axis(format.AsIs(x, width = 30)
ggplot(SS, aes(x = ProgramNameEN, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none") + axis(format.AsIs(x, width = 30)
ggplot(SS, aes(x = ProgramNameEN, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none") + axis(format.AsIs(x, width = 30)
ggplot(SS, aes(x = ProgramNameEN, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
SS <- filter(SS2012, DisciplineEN == "Art History")
ggplot(SS, aes(x = ProgramNameEN, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = Competition_Year, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS2012, aes(x = Competition_Year, y = AmountAmount, shape = sex, color = sex)) +
geom_point(size = 3.5) + geom_smooth() + facet_wrap(~ sex) + theme_bw() +
theme(legend.position="bottom")
ggplot(SS2012, aes(x = Competition_Year, y = AmountAmount) +
geom_point(size = 3.5) + geom_smooth() + facet_wrap(~ sex) + theme_bw() +
theme(legend.position="bottom")
ggplot(SS2012, aes(x = Competition_Year, y = AmountAmount) +
geom_point(size = 3.5) + geom_smooth() + theme_bw() +
theme(legend.position="bottom")
ggplot(SS2012, aes(x = Competition_Year, y = AwardAmount) +
geom_point(size = 3.5) + geom_smooth() + theme_bw() +
theme(legend.position="bottom")
library(ggplot2)
library(dplyr)
library(gcookbook) # has data we want!
read.csv("~/SS2012.csv")
pdf(file = "~/Desktop/height_facet.pdf", width = 10)
ggplot(heightweight, aes(x = ageYear, y = heightIn, shape = sex, color = sex)) +
geom_point(size = 3.5) + geom_smooth() + facet_wrap(~ sex) + theme_bw() +
theme(legend.position="bottom")
dev.off()
ggplot(heightweight, aes(x = ageYear, y = heightIn, shape = sex, color = sex)) +
geom_point(size = 3.5) + geom_smooth() + facet_wrap(~ sex) + theme_bw() +
theme(legend.position="bottom")
ggplot(heightweight, aes(x = ageYear, y = heightIn, shape = sex, color = sex)) +
geom_point(size = 3.5)
ggplot(heightweight, aes(x = ageYear, y = heightIn, shape = sex, color = sex)) +
geom_point(size = 3.5) + geom_smooth(size = 1) + theme_minimal()
ggplot(clim, aes(x = Year, y = Anomaly10y, fill = positive)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(clim, aes(x = Year, y = Anomaly10y, fill = positive)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = Competition_Year, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(clim, aes(x = Year, y = Anomaly10y, fill = positive)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
SS$positive <- SS$Competition_Year >= 2010
ggplot(SS, aes(x = Competition_Year, y = AwardAmount, fill = positive)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = AwardAmount, y = Competition+Year, fill = positive)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = AwardAmount, y = Competition_Year, fill = positive)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = Competition_Year, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = Competition_Year, y = AwardAmount , fill = positive)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggsave("~/Desktop/bar-filtered.pdf")
ggsave("~/Desktop/bar-colored.pdf")
ggplot(SS, aes(x = Competition_Year, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggsave("~/Desktop/bar-filtered.pdf")
theme(legend.position="none")
SS <- filter(SS2012, DisciplineEN == "Art History")
SS$positive <- SS$Competition_Year >= 2010
theme(legend.position="none")
theme(legend.position="none")
ggplot(SS, aes(x = Competition_Year, y = AwardAmount , fill = positive)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
ggplot(SS, aes(x = Competition_Year, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
library(ggplot2)
library(dplyr)
library(gcookbook) # has data we want!
read.csv("~/SS2012.csv")
SS <- filter(SS2012, DisciplineEN == "Art History")
SS$positive <- SS$Competition_Year >= 2010
ggplot(SS, aes(x = Competition_Year, y = AwardAmount)) +
geom_bar(stat = "identity", position = "identity") + theme_minimal() +
theme(legend.position="none")
---
opts_chunk$set(dev = 'pdf')
```{r setup, include=FALSE}
library(ggplot2)
library(dplyr)
# knitr uses png by default, because they are better for html documents
# we want to produce pdf documents, so let's change the default for graphs to pdf
opts_chunk$set(dev = 'pdf')
install.packages("knitr")
```{r setup, include=FALSE}
library(ggplot2)
library(dplyr)
# knitr uses png by default, because they are better for html documents
# we want to produce pdf documents, so let's change the default for graphs to pdf
opts_chunk$set(dev = 'pdf')
```
library(ggplot2)
library(dplyr)
# knitr uses png by default, because they are better for html documents
# we want to produce pdf documents, so let's change the default for graphs to pdf
opts_chunk$set(dev = 'pdf')
library(ggplot2)
library(dplyr)
library(knitr)
# knitr uses png by default, because they are better for html documents
# we want to produce pdf documents, so let's change the default for graphs to pdf
opts_chunk$set(dev = 'pdf')
```{r}
sshrc2012 <- read.csv("~/Dropbox/teaching/courses/integ475_open/class_knitr/data/sshrc2012.csv")
glimpse(sshrc2012)
```
sshrc2012 <- read.csv("~/Dropbox/teaching/courses/integ475_open/class_knitr/data/sshrc2012.csv")
sshrc2012 <- read.csv("~/Prianka/SS2012.csv")
sshrc2012 <- read.csv("~/priankas/SS2012.csv")
sshrc2012 <- read.csv("~/SS2012.csv")
glimpse(sshrc2012)
sshrc <- select(sshrc2012, Name.Nom, role, AwardAmount, Institution, Competition_Year, ProgramNameEN, MainDisciplineEN)
glimpse(sshrc)
View(sshrc)
idgig <- sshrc %>%
group_by(ProgramNameEN, MainDisciplineEN) %>%
filter(ProgramNameEN == "Insight Development Grant" | ProgramNameEN == "Insight Grants" ) %>%
summarise(count = n())
glimpse(idgig)
View(idgig)
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n", size = 10) +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 10))
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 14))
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12))
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12)) +   ggtitle("Awards by Program and Discipline/n")
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12)) +   ggtitle("Awards by Program and Discipline\n")
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12)) + ggtitle("Awards by Program and Discipline\n")
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12))
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + ggtitle("Awards by Program and Discipline\n")
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~ProgramNameEN)
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
facet_wrap(~ProgramNameEN)
ggplot(idgig, aes(reorder(MainDisciplineEN, -count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 10)) +
facet_wrap(~ProgramNameEN) + coord_flip()
ggplot(idgig, aes(reorder(MainDisciplineEN, count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 10)) +
facet_wrap(~ProgramNameEN) + coord_flip()
ggplot(idgig, aes(reorder(MainDisciplineEN, count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 10)) +
facet_wrap(~ProgramNameEN) + coord_flip()
ggplot(idgig, aes(reorder(MainDisciplineEN, count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(, hjust = 1, size = 10)) +
facet_wrap(~ProgramNameEN) + coord_flip()
ggplot(idgig, aes(reorder(MainDisciplineEN, count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_minimal() + theme(axis.text.x = element_text(hjust = 1, size = 10)) +
facet_wrap(~ProgramNameEN) + coord_flip()
ggplot(idgig, aes(reorder(MainDisciplineEN, count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_bw() + theme(axis.text.x = element_text(hjust = 1, size = 10)) +
facet_wrap(~ProgramNameEN) + coord_flip()
ggplot(idgig, aes(reorder(MainDisciplineEN, count), count)) +
geom_bar(stat="identity") + xlab("") + ylab("Count\n") +
theme_bw() + # theme(axis.text.x = element_text(hjust = 1, size = 10)) +
facet_wrap(~ProgramNameEN) + coord_flip()
knit("/Users/priankas/Downloads/class_knitr/knitr_lesson.md")
knit("/Users/priankas/Downloads/class_knitr/knitr_lesson.md")
knit("/Users/priankas/Downloads/class_knitr/knitr_lesson_2.md")
knit("/Users/priankas/Downloads/class_knitr/knitr_lesson.md")
knit("/Users/priankas/Downloads/class_knitr/knitr_lesson.md")
knit("/Users/priankas/Downloads/class_knitr/knitr_lesson.Rmd", "/Users/priankas/Downloads/class_knitr/knitr_lesson.md")
install.packages("igraph")
install.packages("dplyr")
install.packages("ndtv")
install.packages("dplyr")
install.packages("ndtv")
library(igraph)
library(dplyr)
library ("ndtv")
library ("ndtv")
data(windsurfers)
windsurfers
head(as.data.frame(windsurfers))
plot(windsurfers)
plot( network.extract(windsurfers, at=1) )
render.d3movie(windsurfers, displaylabels=TRUE)
data("windsurfers")
windsurfers
plot(windsurfers)
plot( network.extract(windsurfers, at=1) )
plot(network.extract(windsurfers, at=1) )
plot(network.extract(windsurfers, at=2) )
plot(network.extract(windsurfers, at=1) )
class(windsurfers)
windsurfers
V(windsurfers)$id
install.packages("tm")
install.packages("lda")
install.packages("LDAvis")
install.packages("servr")
library(tm)
library(lda)
library(LDAvis)
library(servr)
library(LDAvisData)
devtools::install_github("cpsievert/LDAvisData")
install.packages("devtools")
devtools::install_github("cpsievert/LDAvisData")
devtools::install_github("cpsievert/LDAvisData")
library(tm)
library(lda)
library(LDAvis)
library(servr)
library(LDAvisData)
data(reviews, package = "LDAvisData")
---
title: "Untitled"
output: html_document
---
## TOPIC MODELING IN R
# this is based on a tutorial by: http://cpsievert.github.io/LDAvis/reviews/reviews.html
# this is (mostly) code from their tutorial, but you will want to run it while reading their post
# because it provides an explanation of what the code is doing.
install.packages("tm")
install.packages("lda")
install.packages("LDAvis")
install.packages("servr")
install.packages("devtools")
devtools::install_github("cpsievert/LDAvisData")
library(tm)
library(lda)
library(LDAvis)
library(servr)
library(LDAvisData)
# get Cornell movie review data
data(reviews, package = "LDAvisData")
# let's get some stop words
stop_words <- stopwords("SMART")
# pre-processing:
# note: gsub is pattern matching and replacement in R
reviews <- gsub("'", "", reviews)  # remove apostrophes
reviews <- gsub("[[:punct:]]", " ", reviews)  # replace punctuation with space
reviews <- gsub("[[:cntrl:]]", " ", reviews)  # replace control characters with space
reviews <- gsub("^[[:space:]]+", "", reviews) # remove whitespace at beginning of documents
reviews <- gsub("[[:space:]]+$", "", reviews) # remove whitespace at end of documents
reviews <- tolower(reviews)  # force to lowercase
# tokenize on space and output as a list:
doc.list <- strsplit(reviews, "[[:space:]]+")
# compute the table of terms:
term.table <- table(unlist(doc.list))
term.table <- sort(term.table, decreasing = TRUE)
# remove terms that are stop words or occur fewer than 5 times:
del <- names(term.table) %in% stop_words | term.table < 5
term.table <- term.table[!del]
vocab <- names(term.table)
# now put the documents into the format required by the lda package:
get.terms <- function(x) {
index <- match(x, vocab)
index <- index[!is.na(index)]
rbind(as.integer(index - 1), as.integer(rep(1, length(index))))
}
documents <- lapply(doc.list, get.terms)
# NOTE: if you are interested, here is a nice blog post on lapply and related methods: http://www.r-bloggers.com/using-apply-sapply-lapply-in-r/
# MODEL FITTING
# Compute some statistics related to the data set:
D <- length(documents)  # number of documents (2,000)
W <- length(vocab)  # number of terms in the vocab (14,568)
doc.length <- sapply(documents, function(x) sum(x[2, ]))  # number of tokens per document [312, 288, 170, 436, 291, ...]
N <- sum(doc.length)  # total number of tokens in the data (546,827)
term.frequency <- as.integer(term.table)  # frequencies of terms in the corpus [8939, 5544, 2411, 2410, 2143, ...]
# MCMC and model tuning parameters:
K <- 20
G <- 5000
alpha <- 0.02
eta <- 0.02
# Fit the model:
set.seed(357)
t1 <- Sys.time()
fit <- lda.collapsed.gibbs.sampler(documents = documents, K = K, vocab = vocab,
num.iterations = G, alpha = alpha,
eta = eta, initial = NULL, burnin = 0,
compute.log.likelihood = TRUE)
install.packages("igraph")
install.packages("dplyr")
install.packages("ndtv")
library(igraph)
library(dplyr)
library ("ndtv")
setwd("/Users/priankas/Desktop/Colab_Project/Integ475Project/networks")
CC <- read.graph("net.graphml", format = "graphml")
clust <- clusters(CC)
CC <- induced.subgraph(CC, which(clust$membership == which.max(clust$csize)))
summary(CC)
network <- CC.initialize(10)
network <- CC.initialize(10)
CC <- network.initialize(10)
add.edges.active(wheel,tail=1:9,head=c(2:9,1),onset=1:9, terminus=11)
add.edges.active(CC,tail=1:9,head=c(2:9,1),onset=1:9, terminus=11)
add.edges.active(CC,tail=10,head=c(1:9),onset=10, terminus=12)
class(CC)
print(CC)
as.data.frame(wheel)
as.data.frame(CC)
plot(CC)
plot(network.extract(CC,at=1))
as.data.frame(CC)
render.d3movie(CC, displaylabels=TRUE)
as.data.frame(CC)
CC
filmstrip(CC,displaylabels=FALSE)
compute.animation(CC)
timePrism(CC,at=c(1,10,20),
displaylabels=TRUE,planes = TRUE,
label.cex=0.5)
install.packages("scatterplot3d")
library(scatterplot3d)
timePrism(CC,at=c(1,10,20),
displaylabels=TRUE,planes = TRUE,
label.cex=0.5)
CC <- network.initialize(25)
compute.animation(CC)
timePrism(CC,at=c(1,10,20),
displaylabels=TRUE,planes = TRUE,
label.cex=0.5)
add.edges.active(CC,tail=1:9,head=c(2:9,1),onset=1:9, terminus=11)
add.edges.active(CC,tail=10,head=c(1:9),onset=10, terminus=12)
as.data.frame(CC)
compute.animation(CC)
timePrism(CC,at=c(1,10,20),
displaylabels=TRUE,planes = TRUE,
label.cex=0.5)
timeline(CC)
data(CC)
as.data.frame(CC)
CC <- induced.subgraph(CC, which(clust$membership == which.max(clust$csize)))
summary(CC)
data(CC)
data(CC)
CC
timePrism(CC,at=c(1,10,20),
displaylabels=TRUE,planes = TRUE,
label.cex=0.5)
timeline(CC)
timePrism(CC,at=c(1,10,20),
displaylabels=TRUE,planes = TRUE,
label.cex=0.5)
